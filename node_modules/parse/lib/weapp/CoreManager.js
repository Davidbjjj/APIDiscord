"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");
var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _forEach = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/for-each"));
var _concat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/concat"));
/** Based on https://github.com/react-native-async-storage/async-storage/blob/main/packages/default-storage-backend/src/types.ts */
/*:: export type WebSocketController = {
  onopen: () => void,
  onmessage: (message: any) => void,
  onclose: (arg?: any) => void,
  onerror: (error: any) => void,
  send: (data: any) => void,
  close: () => void,
};*/
var config /*: Config & { [key: string]: any }*/ = {
  IS_NODE: typeof process !== 'undefined' && !!process.versions && !!process.versions.node && !process.versions.electron,
  REQUEST_ATTEMPT_LIMIT: 5,
  REQUEST_BATCH_SIZE: 20,
  REQUEST_HEADERS: {},
  SERVER_URL: 'https://api.parse.com/1',
  SERVER_AUTH_TYPE: null,
  SERVER_AUTH_TOKEN: null,
  LIVEQUERY_SERVER_URL: null,
  ENCRYPTED_KEY: null,
  VERSION: 'js' + "5.1.0",
  APPLICATION_ID: null,
  JAVASCRIPT_KEY: null,
  MASTER_KEY: null,
  USE_MASTER_KEY: false,
  PERFORM_USER_REWRITE: true,
  FORCE_REVOCABLE_SESSION: false,
  ENCRYPTED_USER: false,
  IDEMPOTENCY: false,
  ALLOW_CUSTOM_OBJECT_ID: false,
  PARSE_ERRORS: []
};
function requireMethods(name /*: string*/, methods /*: Array<string>*/, controller /*: any*/) {
  (0, _forEach.default)(methods).call(methods, function (func) {
    if (typeof controller[func] !== 'function') {
      var _context;
      throw new Error((0, _concat.default)(_context = "".concat(name, " must implement ")).call(_context, func, "()"));
    }
  });
}
var CoreManager = {
  get: function (key /*: string*/) /*: any*/{
    if (config.hasOwnProperty(key)) {
      return config[key];
    }
    throw new Error('Configuration key not found: ' + key);
  },
  set: function (key /*: string*/, value /*: any*/) /*: void*/{
    config[key] = value;
  },
  setIfNeeded: function (key /*: string*/, value /*: any*/) /*: any*/{
    if (!config.hasOwnProperty(key)) {
      config[key] = value;
    }
    return config[key];
  },
  /* Specialized Controller Setters/Getters */setAnalyticsController: function (controller /*: AnalyticsController*/) {
    requireMethods('AnalyticsController', ['track'], controller);
    config['AnalyticsController'] = controller;
  },
  getAnalyticsController: function () /*: AnalyticsController*/{
    return config['AnalyticsController'];
  },
  setCloudController: function (controller /*: CloudController*/) {
    requireMethods('CloudController', ['run', 'getJobsData', 'startJob'], controller);
    config['CloudController'] = controller;
  },
  getCloudController: function () /*: CloudController*/{
    return config['CloudController'];
  },
  setConfigController: function (controller /*: ConfigController*/) {
    requireMethods('ConfigController', ['current', 'get', 'save'], controller);
    config['ConfigController'] = controller;
  },
  getConfigController: function () /*: ConfigController*/{
    return config['ConfigController'];
  },
  setCryptoController: function (controller /*: CryptoController*/) {
    requireMethods('CryptoController', ['encrypt', 'decrypt'], controller);
    config['CryptoController'] = controller;
  },
  getCryptoController: function () /*: CryptoController*/{
    return config['CryptoController'];
  },
  setEventEmitter: function (eventEmitter /*: any*/) {
    config['EventEmitter'] = eventEmitter;
  },
  getEventEmitter: function () /*: any*/{
    return config['EventEmitter'];
  },
  setFileController: function (controller /*: FileController*/) {
    requireMethods('FileController', ['saveFile', 'saveBase64'], controller);
    config['FileController'] = controller;
  },
  setEventuallyQueue: function (controller /*: EventuallyQueue*/) {
    requireMethods('EventuallyQueue', ['poll', 'save', 'destroy'], controller);
    config['EventuallyQueue'] = controller;
  },
  getEventuallyQueue: function () /*: EventuallyQueue*/{
    return config['EventuallyQueue'];
  },
  getFileController: function () /*: FileController*/{
    return config['FileController'];
  },
  setInstallationController: function (controller /*: InstallationController*/) {
    requireMethods('InstallationController', ['currentInstallationId', 'currentInstallation', 'updateInstallationOnDisk'], controller);
    config['InstallationController'] = controller;
  },
  getInstallationController: function () /*: InstallationController*/{
    return config['InstallationController'];
  },
  setLiveQuery: function (liveQuery /*: any*/) {
    config['LiveQuery'] = liveQuery;
  },
  getLiveQuery: function () /*: any*/{
    return config['LiveQuery'];
  },
  setObjectController: function (controller /*: ObjectController*/) {
    requireMethods('ObjectController', ['save', 'fetch', 'destroy'], controller);
    config['ObjectController'] = controller;
  },
  getObjectController: function () /*: ObjectController*/{
    return config['ObjectController'];
  },
  setObjectStateController: function (controller /*: ObjectStateController*/) {
    requireMethods('ObjectStateController', ['getState', 'initializeState', 'removeState', 'getServerData', 'setServerData', 'getPendingOps', 'setPendingOp', 'pushPendingState', 'popPendingState', 'mergeFirstPendingState', 'getObjectCache', 'estimateAttribute', 'estimateAttributes', 'commitServerChanges', 'enqueueTask', 'clearAllState'], controller);
    config['ObjectStateController'] = controller;
  },
  getObjectStateController: function () /*: ObjectStateController*/{
    return config['ObjectStateController'];
  },
  setPushController: function (controller /*: PushController*/) {
    requireMethods('PushController', ['send'], controller);
    config['PushController'] = controller;
  },
  getPushController: function () /*: PushController*/{
    return config['PushController'];
  },
  setQueryController: function (controller /*: QueryController*/) {
    requireMethods('QueryController', ['find', 'aggregate'], controller);
    config['QueryController'] = controller;
  },
  getQueryController: function () /*: QueryController*/{
    return config['QueryController'];
  },
  setRESTController: function (controller /*: RESTController*/) {
    requireMethods('RESTController', ['request', 'ajax'], controller);
    config['RESTController'] = controller;
  },
  getRESTController: function () /*: RESTController*/{
    return config['RESTController'];
  },
  setSchemaController: function (controller /*: SchemaController*/) {
    requireMethods('SchemaController', ['get', 'create', 'update', 'delete', 'send', 'purge'], controller);
    config['SchemaController'] = controller;
  },
  getSchemaController: function () /*: SchemaController*/{
    return config['SchemaController'];
  },
  setSessionController: function (controller /*: SessionController*/) {
    requireMethods('SessionController', ['getSession'], controller);
    config['SessionController'] = controller;
  },
  getSessionController: function () /*: SessionController*/{
    return config['SessionController'];
  },
  setStorageController: function (controller /*: StorageController*/) {
    if (controller.async) {
      requireMethods('An async StorageController', ['getItemAsync', 'setItemAsync', 'removeItemAsync', 'getAllKeysAsync'], controller);
    } else {
      requireMethods('A synchronous StorageController', ['getItem', 'setItem', 'removeItem', 'getAllKeys'], controller);
    }
    config['StorageController'] = controller;
  },
  setLocalDatastoreController: function (controller /*: LocalDatastoreController*/) {
    requireMethods('LocalDatastoreController', ['pinWithName', 'fromPinWithName', 'unPinWithName', 'getAllContents', 'clear'], controller);
    config['LocalDatastoreController'] = controller;
  },
  getLocalDatastoreController: function () /*: LocalDatastoreController*/{
    return config['LocalDatastoreController'];
  },
  setLocalDatastore: function (store /*: any*/) {
    config['LocalDatastore'] = store;
  },
  getLocalDatastore: function () {
    return config['LocalDatastore'];
  },
  getStorageController: function () /*: StorageController*/{
    return config['StorageController'];
  },
  setAsyncStorage: function (storage /*: AsyncStorageType*/) {
    config['AsyncStorage'] = storage;
  },
  getAsyncStorage: function () {
    return config['AsyncStorage'];
  },
  setWebSocketController: function (controller /*: new (url: string | URL, protocols?: string | string[] | undefined) => WebSocketController*/) {
    config['WebSocketController'] = controller;
  },
  getWebSocketController: function () /*: new (url: string | URL, protocols?: string | string[] | undefined) => WebSocketController*/{
    return config['WebSocketController'];
  },
  setUserController: function (controller /*: UserController*/) {
    requireMethods('UserController', ['setCurrentUser', 'currentUser', 'currentUserAsync', 'signUp', 'logIn', 'become', 'logOut', 'me', 'requestPasswordReset', 'upgradeToRevocableSession', 'requestEmailVerification', 'verifyPassword', 'linkWith'], controller);
    config['UserController'] = controller;
  },
  getUserController: function () /*: UserController*/{
    return config['UserController'];
  },
  setLiveQueryController: function (controller /*: LiveQueryControllerType*/) {
    requireMethods('LiveQueryController', ['setDefaultLiveQueryClient', 'getDefaultLiveQueryClient', '_clearCachedDefaultClient'], controller);
    config['LiveQueryController'] = controller;
  },
  getLiveQueryController: function () /*: LiveQueryControllerType*/{
    return config['LiveQueryController'];
  },
  setHooksController: function (controller /*: HooksController*/) {
    requireMethods('HooksController', ['create', 'get', 'update', 'remove'], controller);
    config['HooksController'] = controller;
  },
  getHooksController: function () /*: HooksController*/{
    return config['HooksController'];
  },
  setParseOp: function (op /*: typeof ParseOp*/) {
    config['ParseOp'] = op;
  },
  getParseOp: function () {
    return config['ParseOp'];
  },
  setParseObject: function (object /*: typeof ParseObject*/) {
    config['ParseObject'] = object;
  },
  getParseObject: function () /*: ParseObject*/{
    return config['ParseObject'];
  },
  setParseQuery: function (query /*: typeof ParseQuery*/) {
    config['ParseQuery'] = query;
  },
  getParseQuery: function () /*: ParseQuery*/{
    return config['ParseQuery'];
  },
  setParseRole: function (role /*: typeof ParseRole*/) {
    config['ParseRole'] = role;
  },
  getParseRole: function () /*: ParseRole*/{
    return config['ParseRole'];
  },
  setParseUser: function (user /*: typeof ParseUser*/) {
    config['ParseUser'] = user;
  },
  getParseUser: function () /*: ParseUser*/{
    return config['ParseUser'];
  }
};
module.exports = CoreManager;
var _default = CoreManager;
exports.default = _default;