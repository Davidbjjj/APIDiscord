"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");
var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime-corejs3/regenerator"));
var _stringify = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/json/stringify"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/asyncToGenerator"));
var _CoreManager = _interopRequireDefault(require("./CoreManager"));
var _Storage = _interopRequireDefault(require("./Storage"));
var _ParseInstallation = _interopRequireDefault(require("./ParseInstallation"));
var _uuid = _interopRequireDefault(require("./uuid"));
var CURRENT_INSTALLATION_KEY = 'currentInstallation';
var CURRENT_INSTALLATION_ID_KEY = 'currentInstallationId';
var iidCache /*: string | null*/ = null;
var currentInstallationCache = null;
var currentInstallationCacheMatchesDisk = false;
var InstallationController = {
  updateInstallationOnDisk: function (installation /*: ParseInstallation*/) /*: Promise<void>*/{
    var _this = this;
    return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
      var path;
      return _regenerator.default.wrap(function (_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            path = _Storage.default.generatePath(CURRENT_INSTALLATION_KEY);
            _context.next = 3;
            return _Storage.default.setItemAsync(path, (0, _stringify.default)(installation.toJSON()));
          case 3:
            _this._setCurrentInstallationCache(installation);
          case 4:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }))();
  },
  currentInstallationId: function () /*: Promise<string>*/{
    return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {
      var path, iid;
      return _regenerator.default.wrap(function (_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            if (!(typeof iidCache === 'string')) {
              _context2.next = 2;
              break;
            }
            return _context2.abrupt("return", iidCache);
          case 2:
            path = _Storage.default.generatePath(CURRENT_INSTALLATION_ID_KEY);
            _context2.next = 5;
            return _Storage.default.getItemAsync(path);
          case 5:
            iid = _context2.sent;
            if (iid) {
              _context2.next = 9;
              break;
            }
            iid = (0, _uuid.default)();
            return _context2.abrupt("return", _Storage.default.setItemAsync(path, iid).then(function () {
              iidCache = iid;
              return iid;
            }));
          case 9:
            iidCache = iid;
            return _context2.abrupt("return", iid);
          case 11:
          case "end":
            return _context2.stop();
        }
      }, _callee2);
    }))();
  },
  currentInstallation: function () /*: Promise<ParseInstallation | null>*/{
    var _this2 = this;
    return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3() {
      var path, installationData, current, installationId, installation;
      return _regenerator.default.wrap(function (_context3) {
        while (1) switch (_context3.prev = _context3.next) {
          case 0:
            if (!currentInstallationCache) {
              _context3.next = 2;
              break;
            }
            return _context3.abrupt("return", currentInstallationCache);
          case 2:
            if (!currentInstallationCacheMatchesDisk) {
              _context3.next = 4;
              break;
            }
            return _context3.abrupt("return", null);
          case 4:
            path = _Storage.default.generatePath(CURRENT_INSTALLATION_KEY);
            _context3.next = 7;
            return _Storage.default.getItemAsync(path);
          case 7:
            installationData = _context3.sent;
            currentInstallationCacheMatchesDisk = true;
            if (!installationData) {
              _context3.next = 15;
              break;
            }
            installationData = JSON.parse(installationData);
            installationData.className = '_Installation';
            current = _ParseInstallation.default.fromJSON(installationData);
            currentInstallationCache = current;
            return _context3.abrupt("return", current);
          case 15:
            _context3.next = 17;
            return _this2.currentInstallationId();
          case 17:
            installationId = _context3.sent;
            installation = new _ParseInstallation.default();
            installation.set('deviceType', _ParseInstallation.default.DEVICE_TYPES.WEB);
            installation.set('installationId', installationId);
            installation.set('parseVersion', _CoreManager.default.get('VERSION'));
            currentInstallationCache = installation;
            _context3.next = 25;
            return _Storage.default.setItemAsync(path, (0, _stringify.default)(installation.toJSON()));
          case 25:
            return _context3.abrupt("return", installation);
          case 26:
          case "end":
            return _context3.stop();
        }
      }, _callee3);
    }))();
  },
  _clearCache: function () {
    iidCache = null;
    currentInstallationCache = null;
    currentInstallationCacheMatchesDisk = false;
  },
  _setInstallationIdCache: function (iid /*: string*/) {
    iidCache = iid;
  },
  _setCurrentInstallationCache: function (installation /*: ParseInstallation*/) {
    var matchesDisk /*: boolean*/ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    currentInstallationCache = installation;
    currentInstallationCacheMatchesDisk = matchesDisk;
  }
};
module.exports = InstallationController;
var _default = InstallationController;
exports.default = _default;