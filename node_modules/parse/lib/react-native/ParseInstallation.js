var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _CoreManager = _interopRequireDefault(require("./CoreManager"));
var _ParseObject2 = _interopRequireDefault(require("./ParseObject"));
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function () {
    var Super = (0, _getPrototypeOf2.default)(Derived),
      result;
    if (hasNativeReflectConstruct) {
      var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return (0, _possibleConstructorReturn2.default)(this, result);
  };
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}
var DEVICE_TYPES = {
  IOS: 'ios',
  MACOS: 'macos',
  TVOS: 'tvos',
  FCM: 'fcm',
  ANDROID: 'android',
  WEB: 'web'
};
var ParseInstallation = function (_ParseObject) {
  (0, _inherits2.default)(ParseInstallation, _ParseObject);
  var _super = _createSuper(ParseInstallation);
  function ParseInstallation(attributes) {
    var _this;
    (0, _classCallCheck2.default)(this, ParseInstallation);
    _this = _super.call(this, '_Installation');
    if (attributes && typeof attributes === 'object') {
      if (!_this.set(attributes)) {
        throw new Error("Can't create an invalid Installation");
      }
    }
    return _this;
  }
  (0, _createClass2.default)(ParseInstallation, [{
    key: "appIdentifier",
    get: function () {
      return this.get('appIdentifier');
    }
  }, {
    key: "appVersion",
    get: function () {
      return this.get('appVersion');
    }
  }, {
    key: "appName",
    get: function () {
      return this.get('appName');
    }
  }, {
    key: "badge",
    get: function () {
      return this.get('badge');
    }
  }, {
    key: "channels",
    get: function () {
      return this.get('channels');
    }
  }, {
    key: "deviceToken",
    get: function () {
      return this.get('deviceToken');
    }
  }, {
    key: "deviceType",
    get: function () {
      return this.get('deviceType');
    }
  }, {
    key: "GCMSenderId",
    get: function () {
      return this.get('GCMSenderId');
    }
  }, {
    key: "installationId",
    get: function () {
      return this.get('installationId');
    }
  }, {
    key: "localeIdentifier",
    get: function () {
      return this.get('localeIdentifier');
    }
  }, {
    key: "parseVersion",
    get: function () {
      return this.get('parseVersion');
    }
  }, {
    key: "pushType",
    get: function () {
      return this.get('pushType');
    }
  }, {
    key: "timeZone",
    get: function () {
      return this.get('timeZone');
    }
  }, {
    key: "save",
    value: function () {
      var _save = (0, _asyncToGenerator2.default)(function* () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        yield (0, _get2.default)((0, _getPrototypeOf2.default)(ParseInstallation.prototype), "save", this).apply(this, args);
        yield _CoreManager.default.getInstallationController().updateInstallationOnDisk(this);
        return this;
      });
      function save() {
        return _save.apply(this, arguments);
      }
      return save;
    }()
  }], [{
    key: "DEVICE_TYPES",
    get: function () {
      return DEVICE_TYPES;
    }
  }, {
    key: "currentInstallation",
    value: function () {
      return _CoreManager.default.getInstallationController().currentInstallation();
    }
  }]);
  return ParseInstallation;
}(_ParseObject2.default);
_ParseObject2.default.registerSubclass('_Installation', ParseInstallation);
module.exports = ParseInstallation;
var _default = ParseInstallation;
exports.default = _default;